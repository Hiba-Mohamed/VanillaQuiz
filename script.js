const questions = [
  {
    question: "ููู ุฑุณูุช ูููุฉ 'ุฑุญูุฉ' ูู ุณูุฑุฉ ุงูุฒุฎุฑูุ",
    options: ["ุจุงููุงุก.", "ุจุงูุชุงุก ุงููุจุณูุทุฉ.", "ุจุงูุชุงุก ุงููุฑุจูุทุฉ.", "ุบูุฑ ููุฌูุฏุฉ."],
    answer: "ุจุงูุชุงุก ุงููุจุณูุทุฉ.",
    explanation:
      "ูุฑุญูุชุง ุงูุฒููุฎูุฑููู ุจูุงูุชูุง ุฒูุจุฑููู ... ุงูุงูุนูุฑูุงูู ุฑูููู ูููุฏู ููุงูู ุงููุจูููุฑููู.",
  },
  {
    question: "ููู ุฑุณูุช ูููุฉ 'ุงูุฑุฃุฉ' ูู ุณูุฑุฉ ููุณูุ",
    options: ["ุจุงููุงุก.", "ุจุงูุชุงุก ุงููุจุณูุทุฉ.", "ุจุงูุชุงุก ุงููุฑุจูุทุฉ.", "ุบูุฑ ููุฌูุฏุฉ."],
    answer: "ุจุงูุชุงุก ุงููุจุณูุทุฉ.",
    explanation:
      "ููุงููุฑูุฃูุชู ูููุณููู ุนูููุฑูุงูู ุงููููุตูุตู ... ุชูุญูุฑููููู ููุนูุตูููุชู ุจูููุฏู ุณูููุนู ููุฎูุตู .",
  },
  {
    question: "ููู ุฑุณูุช ูููุฉ 'ูุนุตูุฉ' ูู ุณูุฑุฉ ุงููุฌุงุฏูุฉุ",
    options: ["ุจุงููุงุก.", "ุจุงูุชุงุก ุงููุจุณูุทุฉ.", "ุจุงูุชุงุก ุงููุฑุจูุทุฉ.", "ุบูุฑ ููุฌูุฏุฉ."],
    answer: "ุจุงูุชุงุก ุงููุจุณูุทุฉ.",
    explanation:
      "ููุงููุฑูุฃูุชู ูููุณููู ุนูููุฑูุงูู ุงููููุตูุตู ... ุชูุญูุฑููููู ููุนูุตูููุชู ุจูููุฏู ุณูููุนู ููุฎูุตู .",
  },
  {
    question: "ููู ุฑุณูุช ูููุฉ 'ูุฑุฉ' ูู ุณูุฑุฉ ุงููุตุตุ",
    options: ["ุจุงููุงุก.", "ุจุงูุชุงุก ุงููุจุณูุทุฉ.", "ุจุงูุชุงุก ุงููุฑุจูุทุฉ.", "ุบูุฑ ููุฌูุฏุฉ."],
    answer: "ุจุงูุชุงุก ุงููุจุณูุทุฉ.",
    explanation: "ููุฑููุชู ุนููููู ุฌููููุชู ููู ููููุนูุชู ... ููุทูุฑูุชู ุจููููููุชู ููุงุจูููุชู ููููููููุชู.",
  },
  {
    question: "ูุง ูู ุชุนุฑูู ููุฒ ุงููุตูุ",
    options: [
      "ููุฒุฉ ูุคุชู ุจูุง ููุชููู ูู ุงูุจุฏุก ุจุงูุณุงูู.",
      "ููุฒุฉ ุชููุชุจ ูุชูููุธ ุฏุงุฆููุง.",
      "ููุฒุฉ ุชูุญุฐู ูู ุงูููู.",
      "ููุฒุฉ ุชุฃุชู ูู ููุงูุฉ ุงููููุฉ.",
    ],
    answer: "ููุฒุฉ ูุคุชู ุจูุง ููุชููู ูู ุงูุจุฏุก ุจุงูุณุงูู.",
    explanation:
      "ููุฒุฉ ุงููุตู ุชููุชุจ ูู ุฃูู ุงููููุฉ ููุง ุชูููุธ ุนูุฏ ูุตููุง ุจูุง ูุจููุง.",
  },
  {
    question: "ูุง ูู ุญุฑูุฉ ููุฒุฉ ุงููุตู ุนูุฏ ุงูุจุฏุก ุจุงููุนู 'ุงุฑูุถ'ุ",
    options: ["ูุถูููุฉ.", "ููุชูุญุฉ.", "ููุณูุฑุฉ.", "ุณุงููุฉ."],
    answer: "ูุถูููุฉ.",
    explanation: "ุฅุฐุง ูุงู ุซุงูุซ ุงููุนู ูุถูููุงู ุถูุงู ูุงุฒูุงูุ ูุฅู ููุฒุฉ ุงููุตู ุชูุถู.",
  },
  {
    question: "ูุง ูู ุญุฑูุฉ ููุฒุฉ ุงููุตู ุนูุฏ ุงูุจุฏุก ุจุงููุนู 'ุงุจููุง'ุ",
    options: ["ูุถูููุฉ.", "ููุชูุญุฉ.", "ููุณูุฑุฉ.", "ุณุงููุฉ."],
    answer: "ููุณูุฑุฉ.",
    explanation:
      "ุฅุฐุง ูุงู ุซุงูุซ ุงููุนู ูุถูููุงู ุถูุงู ุนุงุฑุถุงูุ ูุฅู ููุฒุฉ ุงููุตู ุชููุณุฑ.",
  },
  {
    question: "ููู ูููุทู ุงูุญุฑู ุงูุฃุฎูุฑ ูู ุงููููุ",
    options: [
      "ูููุทู ุณุงูููุง.",
      "ูููุทู ูุชุญุฑููุง.",
      "ูููุทู ููุฏูุฏูุง.",
      "ูุง ูููุทู ููุงุฆููุง.",
    ],
    answer: "ูููุทู ุณุงูููุง.",
    explanation: "ุงูุญุฑู ุงูุฃุฎูุฑ ููุณูู ุนูุฏ ุงูููู ุญุณุจ ููุงุนุฏ ุงูุชุฌููุฏ.",
  },
  {
    question: "ูุง ูู ูุงุนุฏุฉ ุงูููู ุนูู ูููุฉ ููุชููุฉ ุจุงูุชุงุก ุงููุฑุจูุทุฉุ",
    options: ["ุชููุทู ูุงุก.", "ุชููุทู ุชุงุก.", "ุชูุญุฐู ุงูุชุงุก.", "ูุง ุชููุทู."],
    answer: "ุชููุทู ูุงุก.",
    explanation: "ุนูุฏ ุงูููู ุนูู ุงูุชุงุก ุงููุฑุจูุทุฉ ุชููุทู ูุงููุงุก.",
  },
  {
    question: "ููู ูุชู ุงูููู ุนูู ูููุฉ ููุชููุฉ ุจุฃูู ููุฏูุฏุฉุ",
    options: [
      "ุชููุฏ ุงูุฃูู.",
      "ุชูุญุฐู ุงูุฃูู.",
      "ููููู ุนูู ุงูุญุฑู ูุจู ุงูุฃูู.",
      "ุชูููุจ ุงูุฃูู ุฅูู ููุฒุฉ.",
    ],
    answer: "ุชููุฏ ุงูุฃูู.",
    explanation: "ุนูุฏ ุงูููู ุชููุฏ ุงูุฃูู ุฏูู ุชุบููุฑ ูุทููุง.",
  },
];

let currentQuestionIndex = 0;
let score = 0;

const questionText = document.getElementById("question-text");
const optionsContainer = document.getElementById("options-container");
const questionIndex = document.getElementById("question-index");
const totalQuestions = document.getElementById("total-questions");
const form = document.getElementById("question-form");
const resultContainer = document.getElementById("result");
const correctAnswerText = document.getElementById("correct-answer");
const userAnswerText = document.getElementById("user-answer");
const answerStatus = document.getElementById("answer-status");
const finalResultContainer = document.getElementById("final-result");
const scoreText = document.getElementById("score");
const totalScoreText = document.getElementById("total-score");

function loadQuestion() {
  if (currentQuestionIndex < questions.length) {
    const question = questions[currentQuestionIndex];
    questionText.textContent = question.question;
    questionIndex.textContent = currentQuestionIndex + 1;
    totalQuestions.textContent = questions.length;

    optionsContainer.innerHTML = "";
    question.options.forEach((option) => {
      const label = document.createElement("label");
      label.innerHTML = `
        <input type="radio" name="answer" value="${option}" required>
        ${option}
      `;
      optionsContainer.appendChild(label);
    });
  } else {
    showFinalResult();
  }
}

function handleFormSubmit(event) {
  event.preventDefault();
  const userAnswer = form.answer.value;
  const correctAnswer = questions[currentQuestionIndex].answer;

  const isCorrect = userAnswer === correctAnswer;

  // Update correct answer div
  const correctAnswerText = document.getElementById("correct-answer");
  correctAnswerText.textContent = correctAnswer;

  // Update user answer div
  const userAnswerText = document.getElementById("user-answer");
  userAnswerText.textContent = userAnswer;

  const answerStatus = document.getElementById("answer-status");
  const userAnswerDiv = document.getElementById("user-answer-div");
  if (isCorrect) {
    answerStatus.textContent = "ุตุญูุญุฉ";
    userAnswerDiv.classList.add("correct");
    userAnswerDiv.classList.remove("wrong");
    score++;
    console.log(score);
  } else {
    answerStatus.textContent = "ุฎุงุทุฆุฉ";
    userAnswerDiv.classList.add("wrong");
    userAnswerDiv.classList.remove("correct");
  }

  // Display explanation
  const explanationDiv = document.getElementById("explanation");
  explanationDiv.textContent = `ุงูุดุฑุญ: ${questions[currentQuestionIndex].explanation}`;

  // Show result container and manage next question button
  const resultContainer = document.getElementById("result");
  resultContainer.style.display = "block";
  form.style.display = "none";

  const nextQuestionButton = document.getElementById("next-question");
  nextQuestionButton.style.display = "block";
  nextQuestionButton.onclick = () => {
    currentQuestionIndex++;
    resultContainer.style.display = "none";
    nextQuestionButton.style.display = "none";
    form.style.display = "block";
    loadQuestion();
  };
}

function retryQuiz() {
  currentQuestionIndex = 0;
  score = 0;
  finalResultContainer.style.display = "none";
  document.getElementById("question-container").style.display = "block";
  resultContainer.style.display = "none";
  loadQuestion();
}

function showFinalResult() {
  const totalScore = questions.length;
  const percentage = (score / totalScore) * 100;

  // Update score and total score
  document.getElementById("score").textContent = score;
  document.getElementById("total-score").textContent = totalScore;
  document.getElementById("percentage").textContent = `${percentage}%`;

  // Get the final message container
  const finalMessage = document.getElementById("final-message");

  if (percentage >= 80) {
    finalMessage.textContent = "๐ ุฑุงุฆุน ุฌุฏูุง! ููุฏ ุฃุจุฏุนุช! ุงุณุชูุฑ ูู ุงูุชููุฒ! ๐";
    finalMessage.className = "celebration";
  } else {
    finalMessage.textContent =
      "ูุง ุจุฃุณ! ุญุงูู ูุฑุฉ ุฃุฎุฑูุ ูุณุชุชุญุณู! ุงูุชูุฏู ุงููุณุชูุฑ ูู ุงูุฃูู. ๐ช";
    finalMessage.className = "encouragement";
  }

  // Show final result container
  document.getElementById("final-result").style.display = "block";
  document.getElementById("question-container").style.display = "none";
}
function showNextQuestion() {
  const quizContainer = document.querySelector(".quiz-container");

  // Add the zoom-in animation class
  quizContainer.classList.add("zoom-in");

  // Wait for the animation to complete, then remove the class
  setTimeout(() => {
    quizContainer.classList.remove("zoom-in");

    // Update the question content here
    const questionText = document.getElementById("question-text");
  }, 800); // Match the duration of the animation (800ms)
}
const nextQuestionButton = document.getElementById("next-question");

nextQuestionButton.addEventListener("click", showNextQuestion);

form.addEventListener("submit", handleFormSubmit);
loadQuestion();
